(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{182:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return m}));var n=a(0),r=a.n(n);function p(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){p(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},p=Object.keys(e);for(n=0;n<p.length;n++)a=p[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(n=0;n<p.length;n++)a=p[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=r.a.createContext({}),l=function(e){var t=r.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},b=function(e){var t=l(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,p=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),b=l(a),u=n,m=b["".concat(o,".").concat(u)]||b[u]||d[u]||p;return a?r.a.createElement(m,i(i({ref:t},s),{},{components:a})):r.a.createElement(m,i({ref:t},s))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var p=a.length,o=new Array(p);o[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:n,o[1]=i;for(var s=2;s<p;s++)o[s]=a[s];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"},81:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return i})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return l}));var n=a(2),r=a(6),p=(a(0),a(182)),o={id:"javascript-support",title:"JavaScript Support",sidebar_label:"JavaScript Support"},i={unversionedId:"usages/features/javascript-support",id:"usages/features/javascript-support",isDocsHomePage:!1,title:"JavaScript Support",description:"@nartc/automapper v6 brings basic JavaScript support by exposing a method called createMapMetadata(). @nartc/automapper works based on metadata of the properties on a given class.",source:"@site/docs/usages/features/javascript-support.md",slug:"/usages/features/javascript-support",permalink:"/docs/next/usages/features/javascript-support",editUrl:"https://github.com/nartc/mapper/edit/master/automapper-docusaurus/docs/usages/features/javascript-support.md",version:"current",sidebar_label:"JavaScript Support",sidebar:"docs",previous:{title:"Map Callbacks",permalink:"/docs/next/usages/features/callbacks"},next:{title:"Circular Dependencies",permalink:"/docs/next/usages/avoids/circular-dependency"}},c=[{value:"API",id:"api",children:[]},{value:"Array",id:"array",children:[]},{value:"Other note",id:"other-note",children:[]}],s={rightToc:c};function l(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(p.b)("wrapper",Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(p.b)("p",null,Object(p.b)("inlineCode",{parentName:"p"},"@nartc/automapper")," v6 brings basic ",Object(p.b)("inlineCode",{parentName:"p"},"JavaScript")," support by exposing a method called ",Object(p.b)("inlineCode",{parentName:"p"},"createMapMetadata()"),". ",Object(p.b)("inlineCode",{parentName:"p"},"@nartc/automapper")," works based on ",Object(p.b)("inlineCode",{parentName:"p"},"metadata")," of the properties on a given class.\nIn ",Object(p.b)("inlineCode",{parentName:"p"},"TypeScript"),", the ",Object(p.b)("inlineCode",{parentName:"p"},"metadata")," is provided by ",Object(p.b)("inlineCode",{parentName:"p"},"@AutoMap()")," decorator and/or the ",Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/next/plugin"}),"Transformer Plugin"),"."),Object(p.b)("p",null,"In ",Object(p.b)("inlineCode",{parentName:"p"},"JavaScript"),", it might be hard (or simple depends on your environment) to support ",Object(p.b)("inlineCode",{parentName:"p"},"decorators"),". Hence, ",Object(p.b)("inlineCode",{parentName:"p"},"createMapMetadata()")," is exposed for you to provide the ",Object(p.b)("inlineCode",{parentName:"p"},"metadata")," for ",Object(p.b)("inlineCode",{parentName:"p"},"@nartc/automapper"),".\nTake a look at the following class in ",Object(p.b)("inlineCode",{parentName:"p"},"TypeScript")),Object(p.b)("pre",null,Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"export class User {\n  @AutoMap()\n  firstName!: string;\n  @AutoMap()\n  lastName!: string;\n  @AutoMap()\n  age!: number;\n  @AutoMap()\n  birthday!: Date;\n  @AutoMap()\n  isAdult!: boolean;\n  @AutoMap()\n  addresses!: string[];\n  @AutoMap(() => Profile)\n  profile!: Profile;\n}\n")),Object(p.b)("p",null,"Well, in ",Object(p.b)("inlineCode",{parentName:"p"},"JavaScript"),", this is probably what you have"),Object(p.b)("pre",null,Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"export class User {}\n")),Object(p.b)("p",null,"...or you might not have a class at all. However, ",Object(p.b)("strong",{parentName:"p"},"Object-Oriented Programming")," is something ",Object(p.b)("inlineCode",{parentName:"p"},"JavaScript")," supports out of the box and if you deem ",Object(p.b)("inlineCode",{parentName:"p"},"@nartc/automapper")," can be useful to you,\nyou might want to start creating some empty classes. These empty classes can always have ",Object(p.b)("strong",{parentName:"p"},"instance methods")," because ",Object(p.b)("inlineCode",{parentName:"p"},"@nartc/automapper")," will return the true ",Object(p.b)("strong",{parentName:"p"},"instance")," instead of a ",Object(p.b)("strong",{parentName:"p"},"plain")," Object.\nWhen you have your class ready, call ",Object(p.b)("inlineCode",{parentName:"p"},"createMapMetadata()")," as follow"),Object(p.b)("pre",null,Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"export class User {}\n\ncreateMapMetadata(User, {\n  firstName: String,\n  lastName: String,\n  isAdult: Boolean,\n  birthday: Date,\n  age: Number,\n  addresses: [],\n  profile: Profile,\n});\n")),Object(p.b)("p",null,"And voila, now you can use ",Object(p.b)("inlineCode",{parentName:"p"},"@nartc/automapper")," because the ",Object(p.b)("inlineCode",{parentName:"p"},"metadata")," of ",Object(p.b)("inlineCode",{parentName:"p"},"User")," has been stored."),Object(p.b)("h3",{id:"api"},"API"),Object(p.b)("p",null,"The API is fairly simple. ",Object(p.b)("inlineCode",{parentName:"p"},"createMapMetadata(Class, options)")," where ",Object(p.b)("inlineCode",{parentName:"p"},"Class")," is a ",Object(p.b)("inlineCode",{parentName:"p"},"Constructible")," which is the ",Object(p.b)("inlineCode",{parentName:"p"},"Class")," itself, not an ",Object(p.b)("strong",{parentName:"p"},"instance")," and\n",Object(p.b)("inlineCode",{parentName:"p"},"options")," is an object with ",Object(p.b)("inlineCode",{parentName:"p"},"keys")," as ",Object(p.b)("inlineCode",{parentName:"p"},"properties")," on this class and ",Object(p.b)("inlineCode",{parentName:"p"},"values")," as ",Object(p.b)("inlineCode",{parentName:"p"},"metadata")," of the properties."),Object(p.b)("p",null,"Pay attention that the ",Object(p.b)("inlineCode",{parentName:"p"},"values")," are provided as ",Object(p.b)("inlineCode",{parentName:"p"},"constructors")," like ",Object(p.b)("inlineCode",{parentName:"p"},"String"),", ",Object(p.b)("inlineCode",{parentName:"p"},"Boolean"),", ",Object(p.b)("inlineCode",{parentName:"p"},"Number")," instead of ",Object(p.b)("inlineCode",{parentName:"p"},"string"),", ",Object(p.b)("inlineCode",{parentName:"p"},"boolean"),", ",Object(p.b)("inlineCode",{parentName:"p"},"number"),".\nFor nested models, just provide the ",Object(p.b)("inlineCode",{parentName:"p"},"Constructible<Class>")," (eg: ",Object(p.b)("inlineCode",{parentName:"p"},"Profile"),")."),Object(p.b)("h3",{id:"array"},"Array"),Object(p.b)("p",null,"Array is a little bit tricky. If you have an array of ",Object(p.b)("inlineCode",{parentName:"p"},"primitives")," like ",Object(p.b)("inlineCode",{parentName:"p"},"Array<string>"),", ",Object(p.b)("inlineCode",{parentName:"p"},"Array<boolean>"),", or ",Object(p.b)("inlineCode",{parentName:"p"},"Array<number>")," then all you need to provide is ",Object(p.b)("inlineCode",{parentName:"p"},"[]")," as the ",Object(p.b)("inlineCode",{parentName:"p"},"metadata"),".\nIf you have an ",Object(p.b)("inlineCode",{parentName:"p"},"Array<NestedModel>"),", provide the ",Object(p.b)("inlineCode",{parentName:"p"},"NestedModel")," instead of ",Object(p.b)("inlineCode",{parentName:"p"},"[NestedModel]"),". ",Object(p.b)("inlineCode",{parentName:"p"},"@nartc/automapper")," only needs to store the actual model. The ",Object(p.b)("inlineCode",{parentName:"p"},"sourceObject"),", when ",Object(p.b)("inlineCode",{parentName:"p"},"map()"),", will\ndetermine whether ",Object(p.b)("inlineCode",{parentName:"p"},"@nartc/automapper")," should map to an array instead."),Object(p.b)("h3",{id:"other-note"},"Other note"),Object(p.b)("p",null,"You can always use ",Object(p.b)("inlineCode",{parentName:"p"},"createMapMetadata()")," with ",Object(p.b)("inlineCode",{parentName:"p"},"TypeScript")," and if you do, you will have intellisense for which ",Object(p.b)("inlineCode",{parentName:"p"},"properties")," are available based on the ",Object(p.b)("inlineCode",{parentName:"p"},"Class")," you provide."))}l.isMDXComponent=!0}}]);